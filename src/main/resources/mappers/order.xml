<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.starbucksorder.another_back.repository.OrderMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO
            order_tb
        VALUES(DEFAULT, #{userId}, #{paymentId}, #{paymentType}, #{orderType}, #{orderAmount}, 1, now(), now())
    </insert>

    <update id="updateStatus">
        update
            order_tb
        set
            order_state = #{orderState}
        where
            order_id = #{orderId}
    </update>

    <select id="findOrderIdByUserId" resultType="java.lang.Long">
        select
            order_id
        from
            order_tb
        where
            user_id = #{userId}
    </select>

    <select id="findByDate" resultType="com.starbucksorder.another_back.entity.Order">
        SELECT
            order_id AS orderId,
            user_id AS userId,
            payment_id AS paymentId,
            payment_type AS paymentType,
            order_type AS orderType,
            order_amount AS orderAmount,
            order_state AS orderState,
            create_date AS createDate,
            update_date AS updateDate
        FROM
            order_tb
        WHERE
            DATE(create_date) BETWEEN DATE(#{startDate}) AND DATE(#{endDate})
        ORDER BY
            create_date DESC
        LIMIT
            #{startIndex}, #{limit}
    </select>
    <select id="countByDate" resultType="int">
        SELECT
            COUNT(order_id)
        FROM
            order_tb
        WHERE
            DATE(create_date) BETWEEN DATE(#{startDate}) AND DATE(#{endDate})
    </select>
    <resultMap id="orderResultMap" type="com.starbucksorder.another_back.entity.Order">
        <id property="orderId" column="order_id"/>
        <result property="userId" column="user_id"/>
        <result property="paymentId" column="payment_id"/>
        <result property="paymentType" column="payment_type"/>
        <result property="orderType" column="order_type"/>
        <result property="orderAmount" column="order_amount"/>
        <result property="orderState" column="order_state"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
        <association property="orderDetails" resultMap="orderDetailResultMap"/>
    </resultMap>

    <resultMap id="orderDetailResultMap" type="com.starbucksorder.another_back.entity.OrderDetail">
        <id property="orderDetailId" column="order_detail_id"/>
        <result property="menuId" column="menu_id"/>
        <result property="quantity" column="quantity"/>
        <result property="orderComment" column="order_comment"/>
    </resultMap>
    <select id="findOrderById" resultMap="orderResultMap">
        SELECT
            ot.order_id,
            ot.user_id,
            ot.payment_id,
            ot.payment_type,
            ot.order_type,
            ot.order_amount,
            ot.order_state,
            ot.create_date,
            ot.update_date,
            odt.order_detail_id,
            odt.menu_id,
            odt.quantity,
            odt.order_comment
        FROM
            order_tb ot
        LEFT OUTER JOIN order_detail_tb odt on (odt.order_id = ot.order_id)
        WHERE
            ot.order_id = #{orderId}
    </select>

</mapper>