<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.starbucksorder.another_back.repository.OrderMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO
            order_tb
        VALUES(DEFAULT, #{userId}, #{paymentId}, #{paymentType}, #{orderType}, IFNULL(#{orderAmount}, 0), 1, now(), now())
    </insert>

    <update id="updateStatus">
        update
            order_tb
        set
            order_state = 2
        where
            order_id = #{orderId}
    </update>

    <select id="findOrderIdByUserId" resultType="java.lang.Long">
        select
            order_id
        from
            order_tb
        where
            user_id = #{userId}
    </select>

    <select id="findByDate" resultType="com.starbucksorder.another_back.entity.Order">
        SELECT
            order_id AS orderId,
            user_id AS userId,
            payment_id AS paymentId,
            payment_type AS paymentType,
            order_type AS orderType,
            order_amount AS orderAmount,
            order_state AS orderState,
            create_date AS createDate,
            update_date AS updateDate
        FROM
            order_tb
        WHERE
            (#{dateType} = 0 AND DATE(create_date) BETWEEN #{startDate} AND #{endDate})
        OR
            (#{dateType} = 1 AND DATE(create_date) BETWEEN (#{startDate}) AND #{endDate})
        ORDER BY
            create_date DESC
        LIMIT
            #{startIndex}, #{limit}
    </select>

    <select id="countByDate" resultType="int">
        SELECT
            COUNT(order_id)
        FROM
            order_tb
        WHERE
            DATE(create_date) BETWEEN DATE(#{startDate}) AND DATE(#{endDate})
    </select>

    <resultMap id="orderResultMap" type="com.starbucksorder.another_back.entity.Order">
        <id property="orderId" column="order_id"/>
        <result property="userId" column="user_id"/>
        <result property="paymentId" column="payment_id"/>
        <result property="paymentType" column="payment_type"/>
        <result property="orderType" column="order_type"/>
        <result property="orderAmount" column="order_amount"/>
        <result property="orderState" column="order_state"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
        <association property="orderDetails" resultMap="orderDetailResultMap"/>
    </resultMap>

    <resultMap id="orderDetailResultMap" type="com.starbucksorder.another_back.entity.OrderDetail">
        <id property="orderDetailId" column="order_detail_id"/>
        <result property="menuId" column="menu_id"/>
        <result property="quantity" column="quantity"/>
        <result property="orderComment" column="order_comment"/>
    </resultMap>
    <select id="findOrderById" resultMap="orderResultMap">
        SELECT
            ot.order_id,
            ot.user_id,
            ot.payment_id,
            ot.payment_type,
            ot.order_type,
            ot.order_amount,
            ot.order_state,
            ot.create_date,
            ot.update_date,
            odt.order_detail_id,
            odt.menu_id,
            odt.quantity,
            odt.order_comment
        FROM
            order_tb ot
        LEFT OUTER JOIN order_detail_tb odt on (odt.order_id = ot.order_id)
        WHERE
            ot.order_id = #{orderId}
    </select>
    <select id="findByDateForSale" resultType="com.starbucksorder.another_back.dto.admin.response.Sales.RespSaleDto">
        SELECT
            SUM(IF(order_state = 1, order_amount, 0))                                             AS totalAmount,
            COUNT(DISTINCT IF(order_state = 1, order_id, NULL))                                   AS orderCount,
            SUM(IF(order_state = 2, order_amount, 0))                                             AS refundAmount,
            COUNT(DISTINCT IF(order_state = 2, order_id, NULL))                                   AS refundCount,
            SUM(IF(order_state = 1 AND date(create_date) = curdate(), order_amount, 0))           AS todayTotalAmount,
            COUNT(DISTINCT IF(order_state = 1 AND date(create_date) = curdate(), order_id, NULL)) AS todayOrderCount,
            SUM(IF(order_state = 2 AND date(create_date) = curdate(), order_amount, 0))           AS todayRefundAmount,
            COUNT(DISTINCT IF(order_state = 2 AND date(create_date) = curdate(), order_id, NULL)) AS todayRefundCount
        FROM
            order_tb
        WHERE
            YEAR(create_date) = #{selectDate}
    </select>

    <select id="monthlyRevenue" resultType="com.starbucksorder.another_back.dto.admin.response.Sales.RespAdminDashBoard$RespMonthly">
        SELECT
            months.month AS `month`,
            SUM(CASE WHEN YEAR(order_tb.create_date) = #{selectYear} AND order_tb.order_amount > 0 THEN order_tb.order_amount ELSE 0 END) AS totalSales
        FROM
            (SELECT 1 AS `month` UNION ALL
            SELECT 2 UNION ALL
            SELECT 3 UNION ALL
            SELECT 4 UNION ALL
            SELECT 5 UNION ALL
            SELECT 6 UNION ALL
            SELECT 7 UNION ALL
            SELECT 8 UNION ALL
            SELECT 9 UNION ALL
            SELECT 10 UNION ALL
            SELECT 11 UNION ALL
            SELECT 12) AS `months`
        LEFT OUTER JOIN
            order_tb ON MONTH(order_tb.create_date) = months.month
        AND YEAR(order_tb.create_date) = #{selectYear}
        GROUP BY
            months.month
        ORDER BY
            months.month;
    </select>

    <select id="mostMenus" resultType="com.starbucksorder.another_back.dto.admin.response.Sales.RespAdminDashBoard$RespMostMenu">
        select
            mt.menu_id AS menuId,
            mt.menu_name AS menuName,
            SUM(odt.quantity) AS `rank`
        from
            order_detail_tb odt
            inner join menu_tb mt on (mt.menu_id = odt.menu_id)
        WHERE
            YEAR(create_date) = #{selectYear}
        group by
            odt.menu_id
        order by
            `rank` desc
        limit
            0,5
    </select>
    <select id="getSale" resultType="com.starbucksorder.another_back.dto.admin.response.Sales.RespAdminSaleListDto">
        SELECT
            IF(#{dateMode}=0, DATE(create_date), date_format(create_date,'%Y-%m')) AS date,
            sum(order_state=1) AS totalOrderCount,
            sum(IF(order_state = 1, order_amount,0)) AS totalAmount,
            sum(IF(order_state = 2, order_amount,0)) AS refundAmount,
            sum(order_state = 2) AS totalRefundCount
        FROM
            order_tb
        WHERE
            YEAR(create_date) = #{startDate}
            AND
            IF(#{dateType} = 3, DATE(create_date) = DATE(#{startDate}), create_date BETWEEN DATE(#{startDate}) AND DATE(#{endDate}))
        GROUP BY
            IF(#{dateMode} = 0, DATE(create_date), DATE_FORMAT(create_date, '%Y-%m'))
        ORDER BY
            date
        LIMIT
            #{startIndex}, #{limit}
    </select>

    <select id="getYearCount" resultType="java.lang.Integer">
        SELECT
            EXTRACT(YEAR FROM create_date) AS yearCount
        FROM
            order_tb
        GROUP BY
            yearCount
        ORDER BY
            yearCount
    </select>
    <select id="totalSaleCount" resultType="java.lang.Integer">
        SELECT
            COUNT(*) AS totalCount
        FROM
        (
            SELECT
                IF(#{dateMode} = 0, create_date, DATE_FORMAT(create_date, '%Y-%m')) as date
            FROM
                order_tb
            WHERE
                YEAR(create_date) = #{startDate}
                AND
                IF(#{dateType} = 3, DATE(create_date) = DATE(#{startDate}), create_date BETWEEN DATE(#{startDate}) AND DATE(#{endDate}))
            GROUP BY
                IF(#{dateMode} = 0, DATE(create_date), DATE_FORMAT(create_date, '%Y-%m'))
        ) AS subquery;
    </select>
    <select id="getByDate" resultType="com.starbucksorder.another_back.dto.admin.response.Sales.RespAdminSaleAndMenusDto$wtf">
<!--        dateType = 0 월별 1 일별-->
        SELECT
            'totalAmount' as type,
            sum(order_amount) AS totalAmount
        FROM
            order_tb
        WHERE
            order_state = 1
            AND YEAR(create_date) = YEAR(#{criteriaDate})
            AND(
            (#{dateType} = 0 AND MONTH(create_date) = MONTH(#{criteriaDate}))
            OR
            (#{dateType} = 1 AND DATE(create_date) = DATE(#{criteriaDate}))
            )
            UNION ALL
        SELECT
            'cardTotalAmount' AS type,
            sum(order_amount) AS totalAmount
        FROM
            order_tb
        WHERE
            payment_type = 1
            AND order_state = 1
            AND YEAR(create_date) = YEAR(#{criteriaDate})
            AND(
            (#{dateType} = 0 AND MONTH(create_date) = MONTH(#{criteriaDate}))
            OR
            (#{dateType} = 1 AND DATE(create_date) = DATE(#{criteriaDate}))
            )
            UNION ALL
        SELECT
            'complexTotalAmount' as type,
            sum(order_amount) AS totalAmount
        FROM
            order_tb
        WHERE
            payment_type != 1
            AND YEAR(create_date) = YEAR(#{criteriaDate})
            AND(
            (#{dateType} = 0 AND MONTH(create_date) = MONTH(#{criteriaDate}))
            OR
            (#{dateType} = 1 AND DATE(create_date) = DATE(#{criteriaDate}))
            )
            UNION ALL
        SELECT
            'refundTotalAmount' AS type,
            sum(order_amount) AS totalAmount
        FROM
            order_tb
        WHERE
            order_state = 2
            AND YEAR(create_date) = YEAR(#{criteriaDate})
            AND(
            (#{dateType} = 0 AND MONTH(create_date) = MONTH(#{criteriaDate}))
            OR
            (#{dateType} = 1 AND DATE(create_date) = DATE(#{criteriaDate}))
            )
    </select>

    <select id="getMostMenus" resultType="com.starbucksorder.another_back.dto.admin.response.Sales.RespAdminSaleAndMenusDto$Menus">
        SELECT
            mt.menu_name AS menuName,
            sum(odt.quantity) AS totalQuantity
        FROM
            order_tb ot
            INNER JOIN order_detail_tb odt on (odt.order_id = ot.order_id)
            INNER JOIN menu_tb mt on (mt.menu_id = odt.menu_id)
        WHERE
            YEAR(ot.create_date) = YEAR(#{criteriaDate})
        AND(
            (#{dateType} = 0 AND MONTH(ot.create_date) = MONTH(#{criteriaDate}))
        OR
            (#{dateType} = 1 AND DATE(ot.create_date) = DATE(#{criteriaDate}))
            )
        GROUP BY
            mt.menu_id
        ORDER BY totalQuantity DESC
        LIMIT 5
    </select>

</mapper>