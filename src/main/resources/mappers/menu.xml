<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.starbucksorder.another_back.repository.MenuMapper">

    <!--    메뉴 추가-->
    <insert id="save" useGeneratedKeys="true" keyProperty="menuId">
        INSERT INTO
            menu_tb
        VALUES
            (DEFAULT, #{menuName}, #{menuPrice}, #{comment}, 1, NOW(), NOW(), #{imgUrl})
    </insert>

    <!-- 메뉴삭제    -->
    <delete id="deleteByMenuId">
        DELETE
        FROM
            menu_tb
        WHERE
            menu_id = #{menuId}
    </delete>

    <!-- 메뉴 상태 수정    -->
    <update id="updateMenuStatus">
        UPDATE
            menu_tb
        SET
            menu_status = IF(menu_status = 1, 0, 1)
        WHERE
            menu_id =#{menuId}
    </update>

    <resultMap id="menuResultMap" type="com.starbucksorder.another_back.entity.Menu">
        <id property="menuId" column="menuId"/>
        <result property="menuName" column="menuName"/>
        <result property="menuPrice" column="menuPrice"/>
        <result property="comment" column="comment"/>
        <result property="menuStatus" column="status"/>
        <result property="createDate" column="createDate"/>
        <result property="updateDate" column="updateDate"/>
        <result property="imgUrl" column="imgUrl"/>
        <collection property="menuDetails" javaType="java.util.List" resultMap="menuDetailResultMap" />
    </resultMap>

    <resultMap id="menuDetailResultMap" type="com.starbucksorder.another_back.entity.MenuDetail">
        <id property="menuDetailId" column="menuDetailMenuId" />
        <result property="menuId" column="menuId" />
        <result property="optionId" column="menuDetailOptionId" />
        <association property="option" resultMap="OptionResultMap" />
    </resultMap>

    <resultMap id="OptionResultMap" type="com.starbucksorder.another_back.entity.Option">
        <id property="optionId" column="optionId" />
        <result property="optionName" column="optionName" />
        <result property="createDate" column="createDate" />
        <result property="updateDate" column="updateDate" />
        <collection property="optionDetail" javaType="java.util.List" resultMap="OptionDetailResultMap" />
    </resultMap>

    <resultMap id="OptionDetailResultMap" type="com.starbucksorder.another_back.entity.OptionDetail">
        <id property="optionDetailId" column="optionDetailId" />
        <result property="optionId" column="optionId" />
        <result property="optionDetailValue" column="optionDetailValue" />
        <result property="optionDetailPrice" column="optionDetailPrice" />
    </resultMap>

    <update id="updateMenuName">
        update
            menu_tb
        set
            menu_name = #{menuName}
        where
            menu_id = #{menuId}
    </update>


    <select id="findByMenuId" resultMap="menuResultMap">
        SELECT
            mt.menu_id as menuId,
            mt.menu_name as menuName,
            mt.menu_price as menuPrice,
            mt.comment as comment,
            mt.menu_status as status,
<!--            mt.create_date as createDate,-->
<!--            mt.update_date as updateDate,-->
            mt.img_url as imgUrl,

            mdt.menu_detail_id as menuDetailId,
            mdt.menu_id as menuDetailMenuId,
            mdt.option_id as menuDetailOptionId,

            ot.option_id as optionId,
            ot.option_name as optionName,
<!--            ot.create_date as createDate,-->
<!--            ot.update_date as updateDate,-->

            odt.option_detail_id as optionDetailId,
            odt.option_detail_value as optionDetailValue,
            odt.option_detail_price as optionDetailPrice
        FROM
            menu_tb mt
        LEFT OUTER JOIN menu_detail_tb mdt on (mdt.menu_id = mt.menu_id)
        LEFT OUTER JOIN option_tb ot on (ot.option_id = mdt.option_id)
        LEFT OUTER JOIN option_detail_tb odt on (odt.option_id = ot.option_id)
        WHERE
            mt.menu_id = #{menuId}
    </select>

    <select id="findAllByStartIndexAndLimit" resultType="com.starbucksorder.another_back.entity.Menu">
        select
            mt.menu_id as menuId,
            mt.menu_name as menuName,
            mt.menu_price as menuPrice,
            mt.comment as comment,
            mt.menu_status as status,
            mt.create_date as createDate,
            mt.update_date as updateDate,
            mt.img_url as imgurl
        from
            menu_tb as mt
        left outer join menu_category_tb mct on (mt.menu_id = mct.menu_id)
        left outer join category_tb ct on (mct.category_id = ct.category_id)
        where
        mct.category_id = #{categoryId}
        and mt.menu_status =1
        limit #{startIndex}, #{limit}
    </select>

<!--    -->
    <select id="getCountAllBySearch" resultType="java.lang.Integer">
        select
            count(mt.menu_id) as menuId
        from
            menu_tb as mt
            left outer join menu_category_tb mct on (mt.menu_id = mct.menu_id)
            left outer join category_tb ct on (mct.category_id = ct.category_id)
        where
            mct.category_id = #{categoryId}
    </select>
    <!-- NOTE: 관리자   -->
    <select id="findByMenuName" resultMap="menuResultMap">
        SELECT
        mt.menu_id as menuId,
        mt.menu_name as menuName,
        mt.menu_price as menuPrice,
        mt.comment as comment,
        mt.menu_status as status,
        <!--            mt.create_date as createDate,-->
        <!--            mt.update_date as updateDate,-->
        mt.img_url as imgUrl,

        mdt.menu_detail_id as menuDetailId,
        mdt.menu_id as menuId,
        mdt.option_id as optionId,

        ot.option_id as optionId,
        ot.option_name as optionName,
        <!--            ot.create_date as createDate,-->
        <!--            ot.update_date as updateDate,-->

        odt.option_detail_id as optionDetailId,
        odt.option_detail_value as optionDetailValue,
        odt.option_detail_price as optionDetailPrice
        FROM
        menu_tb mt
        LEFT OUTER JOIN menu_detail_tb mdt on (mdt.menu_id = mt.menu_id)
        LEFT OUTER JOIN option_tb ot on (ot.option_id = mdt.option_id)
        LEFT OUTER JOIN option_detail_tb odt on (odt.option_id = ot.option_id)
        WHERE
        mt.menu_name = #{menuName}
    </select>
    <!-- 관리자 메뉴 상세보기    -->
    <select id="menuDetailByMenuId" resultType="com.starbucksorder.another_back.entity.Menu">
        SELECT
            mt.menu_id AS menuId,
            mt.menu_name AS menuName,
            mt.comment,
            mt.menu_status AS menuStatus,
            mt.img_url AS imgUrl,
            mt.menu_price AS menuPrice,
            group_concat(distinct ot.option_name) AS options,
            group_concat(distinct ct.category_name) AS categories
        FROM
            menu_detail_tb mdt
            left outer join menu_tb mt on (mt.menu_id = mdt.menu_id)
            left outer join option_tb ot on(ot.option_id = mdt.option_id)
            left outer join menu_category_tb mct on (mct.menu_id = mt.menu_id)
            left outer join category_tb ct on (ct.category_id = mct.category_id)
        WHERE
            mt.menu_id = #{menuId}
        group by
            mt.menu_id
    </select>
    <!-- 메뉴 전체조회    -->
    <select id="getMenuList" resultType="com.starbucksorder.another_back.entity.Menu">
        SELECT
            menu_id as menuId,
            menu_name as menuName,
            menu_price as menuPrice,
            comment,
            menu_status as menuStatus,
            img_url as imgUrl
        FROM
            menu_tb
        order by
            menu_id
    </select>

    <!-- 관리자 메뉴 카운트 -->
    <select id="totalCount" resultType="java.lang.Integer">
        SELECT COUNT(*) AS count
        FROM (
            SELECT
                mt.menu_id AS menuId,
                mt.menu_name AS menuName,
                mt.menu_price AS menuPrice,
                mt.menu_status AS menuStatus,
                GROUP_CONCAT(DISTINCT ct.category_name ORDER BY ct.category_name SEPARATOR ', ') AS categories,
                GROUP_CONCAT(DISTINCT ot.option_name ORDER BY ot.option_name SEPARATOR ', ') AS options
            FROM
                menu_category_tb mct
                LEFT OUTER JOIN menu_tb mt on (mt.menu_id = mct.menu_id)
                LEFT OUTER JOIN category_tb ct on(ct.category_id = mct.category_id)
                LEFT OUTER JOIN menu_detail_tb mdt on(mdt.menu_id = mct.menu_id)
                LEFT OUTER JOIN option_tb ot on(ot.option_id = mdt.option_id)
            WHERE
                mt.menu_name LIKE CONCAT ('%', #{searchName}, '%')
                OR ct.category_name LIKE CONCAT ('%', #{searchName}, '%')
            GROUP BY
                mt.menu_id
            ORDER BY
                mt.menu_id
                ) AS subquery
    </select>

    <!-- 관리자 메뉴 검색 및 페이지 조회   -->
    <select id="getMenuListPageByName" resultType="com.starbucksorder.another_back.entity.Menu">
        SELECT
            mt.menu_id AS menuId,
            mt.menu_name AS menuName,
            mt.menu_price AS menuPrice,
            mt.menu_status AS menuStatus,
            GROUP_CONCAT(DISTINCT ct.category_name ORDER BY ct.category_name SEPARATOR ', ') AS categories,
            GROUP_CONCAT(DISTINCT ot.option_name ORDER BY ot.option_name SEPARATOR ', ') AS options
        FROM
            menu_category_tb mct
            LEFT OUTER JOIN menu_tb mt on (mt.menu_id = mct.menu_id)
            LEFT OUTER JOIN category_tb ct on(ct.category_id = mct.category_id)
            LEFT OUTER JOIN menu_detail_tb mdt on(mdt.menu_id = mct.menu_id)
            LEFT OUTER JOIN option_tb ot on(ot.option_id = mdt.option_id)
        WHERE
            mt.menu_name LIKE CONCAT ('%', #{searchName}, '%')
            OR ct.category_name LIKE CONCAT ('%', #{searchName}, '%')
        GROUP BY
            mt.menu_id
        ORDER BY
            mt.menu_id
        LIMIT
            #{startIndex}, #{limit}
    </select>


    <select id="getOptionList" resultType="com.starbucksorder.another_back.entity.Option">
        SELECT
            option_id AS optionId,
            option_name AS optionName
        FROM
            option_tb
        WHERE
            1 = 1
    </select>
    <update id="update">
        UPDATE
            menu_tb
        SET
            menu_name = #{menuName},
            menu_price = #{menuPrice},
            img_url = #{imgUrl},
            comment = #{comment},
            update_date = now()
        WHERE
            menu_id = #{menuId}
    </update>

</mapper>